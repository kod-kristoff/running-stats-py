name: test

on:
  push:
    branches:
      - main
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  MINIMUM_PYTHON_VERSION: "3.9"
  UV_VERSION: "0.5.15"
  CC_TEST_REPORTER_VERSION: "0.11.1"

jobs:
  coverage:
    # This action runs tests for coverage collection and uploads them to codecov.io.
    # This requires the secret `CODECOV_TOKEN` be set as secret on GitHub, both for
    # Actions and Dependabot

    name: "${{ matrix.os }} / ${{ matrix.python-version }} / coverage"
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version:
          # remove the unused versions
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"

    runs-on: ${{ matrix.os }}-latest
    env:
      OS: ${{ matrix.os }}-latest
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: make install-dev

      - name: Download codeclimate coverage reporter
        run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-${{ env.CC_TEST_REPORTER_VERSION }}-linux-amd64 > cc-test-reporter

      - name: Give test coverage reporter executable permissions
        run: chmod +x cc-test-reporter

      - name: Run tests for coverage
        run: make test-w-coverage cov_report=xml

      - name: Save coverage
        run: ./cc-test-reporter format-coverage coverage.xml -t coverage.py --output coverage/codeclimate.${{ matrix.python-version }}.json

      - uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage/codeclimate.${{ matrix.python-version }}.json

      - name: convert coverage data to lcov
        run: |
          ls
          uv run coverage lcov -o reports/lcov.info

      - uses: qltysh/qlty-action/coverage@main
        with:
          coverage-token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: reports/lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # directory: ./coverage
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          # files: ./coverage/coverage.xml
          # flags: unittests
          # name: codecov-umbrella
          verbose: true

  doctests:
    # This action runs doctests for coverage collection and uploads them to codecov.io.
    # This requires the secret `CODECOV_TOKEN` be set as secret on GitHub, both for
    # Actions and Dependabot

    name: "${{ matrix.os }} / 3.9 / doctest"
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        os: [ubuntu]

    runs-on: ${{ matrix.os }}-latest
    env:
      OS: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}

      - name: Install dependencies
        run: make install-dev
      #----------------------------------------------
      # Run tests and upload coverage
      #----------------------------------------------
      - name: make doc-tests
        run: make doc-tests cov_report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          # directory: ./coverage
          env_vars: OS,PYTHON,TESTTYPE
          fail_ci_if_error: true
          # files: ./coverage/coverage.xml
          # flags: unittests
          # name: codecov-umbrella
          verbose: true
        env:
          PYTHON: ${{ env.MINIMUM_PYTHON_VERSION }}
          TESTTYPE: doctest

  minimal:
    # This action chooses the oldest version of the dependencies permitted by Cargo.toml to ensure
    # that this crate is compatible with the minimal version that this crate and its dependencies
    # require. This will pickup issues where this create relies on functionality that was introduced
    # later than the actual version specified (e.g., when we choose just a major version, but a
    # method was added after this version).
    #

    runs-on: ubuntu-latest
    name: ubuntu / 3.9 / minimal-versions
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Set up Python ${{ env.MINIMUM_PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MINIMUM_PYTHON_VERSION }}

      - name: install lowest direct dependencies
        run: uv sync --resolution lowest-direct --all-extras --all-packages --dev

      - name: make test
        run: make test

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  test-check:
    if: always()
    needs:
      - coverage
      - doctests
      - minimal
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  upload_coverage:
    runs-on: ubuntu-latest

    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

    needs: coverage

    steps:
      - name: Download test coverage reporter
        run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-${{ env.CC_TEST_REPORTER_VERSION }}-linux-amd64 > cc-test-reporter

      - name: Give test coverage reporter executable permissions
        run: chmod +x cc-test-reporter

      - uses: actions/download-artifact@v4
        with:
          name: coverage-3.9
          path: coverage

      - uses: actions/download-artifact@v4
        with:
          name: coverage-3.10
          path: coverage

      - uses: actions/download-artifact@v4
        with:
          name: coverage-3.11
          path: coverage

      - uses: actions/download-artifact@v4
        with:
          name: coverage-3.12
          path: coverage

      - uses: actions/download-artifact@v4
        with:
          name: coverage-3.13
          path: coverage

      - name: Aggregate & upload results to Code Climate
        run: |
          ./cc-test-reporter sum-coverage coverage/codeclimate.*.json
          ./cc-test-reporter upload-coverage
